<?xml version="1.0" encoding="utf-8"?>

<Project ToolsVersion="4.0" DefaultTargets="All" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <GenDir>$(MSBuildThisFileDirectory)..\..\Gen</GenDir>
        <DocDir>$(MSBuildThisFileDirectory)..\..\Doc</DocDir>
        <SrcDir>$(MSBuildThisFileDirectory)..\</SrcDir>
        <MSBuildCommunityTasksPath>.</MSBuildCommunityTasksPath>
        <Configuration Condition=" $(Configuration) == '' ">Release</Configuration>
        <NuGetExe>$(SrcDir)\packages\NuGet.Bootstrapper.2.2.1\tools\NuGet.exe</NuGetExe>
    </PropertyGroup>

    <ItemGroup>
        <!--
        order is very important here, for reasons I haven't investigated fully. If the Silverlight solutions are built second, invalid binaries
        are produced. It seems that building the standard solution results in some properties being set that then affect the Silverlight build.
        -->
        <Framework Include="SL40">
            <NuGetName>sl40</NuGetName>
            <FriendlyName>Silverlight 4</FriendlyName>
        </Framework>
        <Framework Include="SL50">
            <NuGetName>sl50</NuGetName>
            <FriendlyName>Silverlight 5</FriendlyName>
        </Framework>
        <Framework Include="FX35">
            <NuGetName>net35</NuGetName>
            <FriendlyName>.NET 3.5</FriendlyName>
        </Framework>
        <Framework Include="FX40">
            <NuGetName>net40</NuGetName>
            <FriendlyName>.NET 4.0</FriendlyName>
        </Framework>
        <Framework Include="FX45">
            <NuGetName>net45</NuGetName>
            <FriendlyName>.NET 4.5</FriendlyName>
        </Framework>
    </ItemGroup>

    <Import Project="$(SrcDir)\.build\MSBuild.Community.Tasks.Targets" />
    <UsingTask AssemblyFile="$(SrcDir)\packages\xunit.2.0.0-alpha-build1611\lib\net45\xunit.runner.msbuild.dll" TaskName="Xunit.Runner.MSBuild.xunit" />

    <!-- gets the value of AssemblyInformationVersionAttribute applied to an assembly -->
    <UsingTask
            TaskName="GetAssemblyInformationalVersion"
            TaskFactory="CodeTaskFactory"
            AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <AssemblyFile Required="true" />
            <Version ParameterType="System.String" Output="true" />
        </ParameterGroup>

        <Task>
            <Using Namespace="System"/>
            <Using Namespace="System.Reflection"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var assembly = Assembly.LoadFrom(AssemblyFile);
                var attribute = (AssemblyInformationalVersionAttribute)Attribute.GetCustomAttribute(assembly, typeof(AssemblyInformationalVersionAttribute));
                Version = attribute.InformationalVersion;
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="All" DependsOnTargets="Clean;Build;UnitTests;GenerateDocumentation;CreateArchives;CreateNuGetPackages"/>

    <Target Name="Clean">
        <MSBuild Projects="$(SrcDir)\KBCsv.sln" Properties="Configuration=%(Framework.Identity) $(Configuration)" Targets="Clean" BuildInParallel="True"/>
        <RemoveDir Directories="$(GenDir)" />
    </Target>

    <Target Name="Build">
        <MSBuild Projects="$(SrcDir)\KBCsv.sln" Properties="Configuration=%(Framework.Identity) $(Configuration)" Targets="Build" BuildInParallel="True"/>
    </Target>

    <Target Name="UnitTests">
        <MakeDir Directories="$(GenDir)\Tests" />
        
        <xunit Assembly="$(SrcDir)\Kent.Boogaart.KBCsv.UnitTests\bin\FX45 $(Configuration)\Kent.Boogaart.KBCsv.UnitTests.dll" Xml="$(GenDir)\Tests\Kent.Boogaart.KBCsv.UnitTests.xml" />
        <xunit Assembly="$(SrcDir)\Kent.Boogaart.KBCsv.Extensions.UnitTests\bin\FX45 $(Configuration)\Kent.Boogaart.KBCsv.Extensions.UnitTests.dll" Xml="$(GenDir)\Tests\Kent.Boogaart.KBCsv.Extensions.UnitTests.xml" />
    </Target>

    <Target Name="PerformanceTests">
        <MakeDir Directories="$(GenDir)\Tests" />
        
        <xunit Assembly="$(SrcDir)\Kent.Boogaart.KBCsv.PerformanceTests\bin\FX45 $(Configuration)\Kent.Boogaart.KBCsv.PerformanceTests.dll" Xml="$(GenDir)\Tests\Kent.Boogaart.KBCsv.PerformanceTests.xml" />
    </Target>
    
    <Target Name="GenerateDocumentation">
        <MakeDir Directories="$(GenDir)\Documentation" />

        <!--
        Build documentation. This relies on the following components being installed:
         - Latest Sandcastle (http://sandcastle.codeplex.com/)
         - Latest Sandcastle Help File Builder (http://shfb.codeplex.com/)
         - Any relevant updates to styles from Sandcastle Styles (http://sandcastlestyles.codeplex.com/)
        -->
        <MSBuild Projects="$(DocDir)\KBCsv.shfbproj"/>
        <OnError ExecuteTargets="GenerateDocumentationFailed"/>
    </Target>

    <Target Name="GenerateDocumentationFailed">
        <Error Text="Building documentation failed. Please ensure you have the following components installed: Latest Sandcastle (http://sandcastle.codeplex.com/), latest Sandcastle Help File Builder (http://shfb.codeplex.com/), any relevant updates to styles from Sandcastle Styles (http://sandcastlestyles.codeplex.com/). You may also need to log out and back in."/>
    </Target>

    <Target Name="CreateArchives" DependsOnTargets="GetVersion">
        <MakeDir Directories="$(GenDir)" Condition="!Exists('$(GenDir)')" />
        <RemoveDir Directories="$(GenDir)\Temp" />
        <MakeDir Directories="$(GenDir)\Temp" Condition="!Exists('$(GenDir)\Temp')" />

        <!-- zip source -->
        <CreateItem Include="..\..\**\*.*" Exclude="..\..\**\*.suo;..\..\**\*.csproj.user;..\..\**\*.gpState;..\..\**\bin\**;..\..\**\obj\**;..\..\**\.svn\**;..\..\Gen\**;..\..\.git\**">
            <Output ItemName="Source" TaskParameter="Include" />
        </CreateItem>
        <Zip ZipFileName="$(GenDir)\KBCsv-$(Version)-src.zip" WorkingDirectory="..\..\" ZipLevel="9" Files="@(Source)" />

        <!-- zip documentation -->
        <CreateItem Include="$(GenDir)\Documentation\KBCsv.chm">
            <Output ItemName="DocFiles" TaskParameter="Include" />
        </CreateItem>
        <Zip ZipFileName="$(GenDir)\KBCsv-$(Version)-doc.zip" WorkingDirectory="$(GenDir)\Documentation\" ZipLevel="9" Files="@(DocFiles)" />

        <!-- zip binaries -->
        <CreateItem Include="$(SrcDir)\Kent.Boogaart.KBCsv.Extensions\bin\%(Framework.Identity) $(Configuration)\*.*">
            <Output ItemName="BinFiles%(Framework.Identity)" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(BinFiles%(Framework.Identity))" DestinationFolder="$(GenDir)\Temp\%(Framework.Identity)" />
        <CreateItem Include="$(GenDir)\Temp\%(Framework.Identity)\*.*">
            <Output ItemName="BinFilesCopy%(Framework.Identity)" TaskParameter="Include" />
        </CreateItem>
        <Zip ZipFileName="$(GenDir)\KBCsv-$(Version)-%(Framework.Identity)-bin.zip" WorkingDirectory="$(GenDir)\Temp\%(Framework.Identity)\" ZipLevel="9" Files="@(BinFilesCopy%(Framework.Identity))" />
    </Target>

    <Target Name="CreateNuGetPackages" DependsOnTargets="GetVersion">
        <MakeDir Directories="$(GenDir)\NuGet\KBCsv"/>
        <MakeDir Directories="$(GenDir)\NuGet\KBCsv.Extensions"/>

        <ItemGroup>
            <Tokens Include="Version">
                <ReplacementValue>$(Version)</ReplacementValue>
            </Tokens>
        </ItemGroup>

        <!-- generate nuspec files from templates -->
        <TemplateFile Template="$(SrcDir)\KBCsv.nuspec.template" OutputFileName="$(GenDir)\NuGet\KBCsv\Kent.Boogaart.KBCsv.nuspec" Tokens="@(Tokens)"/>
        <TemplateFile Template="$(SrcDir)\KBCsv.Extensions.nuspec.template" OutputFileName="$(GenDir)\NuGet\KBCsv.Extensions\Kent.Boogaart.KBCsv.Extensions.nuspec" Tokens="@(Tokens)"/>

        <!-- copy files into the appropriate locations -->
        <CreateItem Include="$(SrcDir)\Kent.Boogaart.KBCsv\bin\%(Framework.Identity) $(Configuration)\Kent.Boogaart.KBCsv.*">
            <Output ItemName="%(Framework.Identity)KBCsvFiles" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(%(Framework.Identity)KBCsvFiles)" DestinationFolder="$(GenDir)\NuGet\KBCsv\lib\%(Framework.NuGetName)" />
        
        <CreateItem Include="$(SrcDir)\Kent.Boogaart.KBCsv.Extensions\bin\%(Framework.Identity) $(Configuration)\Kent.Boogaart.KBCsv.Extensions.*">
            <Output ItemName="%(Framework.Identity)KBCsvExtensionFiles" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(%(Framework.Identity)KBCsvExtensionFiles)" DestinationFolder="$(GenDir)\NuGet\KBCsv.Extensions\lib\%(Framework.NuGetName)" />

        <CreateItem Include="$(SrcDir)\**\*.*" Exclude="$(SrcDir)\**\*.suo;$(SrcDir)\**\*.csproj.user;$(SrcDir)\**\*.gpState;$(SrcDir)\**\bin\**;$(SrcDir)\**\obj\**;$(SrcDir)\**\.svn\**">
            <Output ItemName="Source_Files" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(Source_Files)" DestinationFolder="$(GenDir)\NuGet\KBCsv\src\%(RecursiveDir)"/>
        <Copy SourceFiles="@(Source_Files)" DestinationFolder="$(GenDir)\NuGet\KBCsv.Extensions\src\%(RecursiveDir)"/>

        <!-- pack the nugets -->
        <Exec Command='"$(NuGetExe)" pack -symbols "$(GenDir)\NuGet\KBCsv\Kent.Boogaart.KBCsv.nuspec"' WorkingDirectory="$(GenDir)\NuGet"/>
        <Exec Command='"$(NuGetExe)" pack -symbols "$(GenDir)\NuGet\KBCsv.Extensions\Kent.Boogaart.KBCsv.Extensions.nuspec"' WorkingDirectory="$(GenDir)\NuGet"/>

        <Message Text="NuGet packages created but not published. Type 'msbuild Build.targets /t:PublishNuGetPackages' to publish." Importance="High"/>
    </Target>

    <!--
    this target does not execute automatically - it must be done explicitly
    -->
    <Target Name="PublishNuGetPackages" DependsOnTargets="GetVersion">
        <!-- symbol packages are automatically pushed too -->
        <Exec Command='"$(NuGetExe)" push "$(GenDir)\NuGet\Kent.Boogaart.KBCsv.$(Version).nupkg"'/>
        <Exec Command='"$(NuGetExe)" push "$(GenDir)\NuGet\Kent.Boogaart.KBCsv.Extensions.$(Version).nupkg"'/>
    </Target>

    <!-- ensure the Version property is set appropriately -->
    <Target Name="GetVersion">
        <GetAssemblyInformationalVersion AssemblyFile="$(SrcDir)\Kent.Boogaart.KBCsv\bin\FX45 $(Configuration)\Kent.Boogaart.KBCsv.dll">
            <Output TaskParameter="Version" PropertyName="AssemblyInformationalVersion" />
        </GetAssemblyInformationalVersion>
        <CreateProperty Condition="$(Version) == ''" Value="$(AssemblyInformationalVersion)">
            <Output TaskParameter="Value" PropertyName="Version" />
        </CreateProperty>
    </Target>
</Project>